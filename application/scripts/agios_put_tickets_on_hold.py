import requests
import urllib3
import os
import json  # Mainly used for view request output in an easily readable format using variable r_pretty
# this is for environmental variables to store API keys
from dotenv import load_dotenv
# This will suppress the certificate warnings
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

###############################################################################################################
# Main purpose of script: To place any/all open, unassigned Agios-generated SNOW tickets on hold.             #
# Notes:                                                                                                      #
#       Incident API states: 1. New | 2. In Progress | 3. On Hold | 6. Resolved | 7. Closed | 8. Canceled     #
#       Task API states: -1. Open | 0. Review | 2. Pending | 3. Closed Complete                               #                                                                                                                                                 #
###############################################################################################################

# --- Variables ---------------------------------------------

# Traditional variables from .env
load_dotenv()

# Used to configure the app when it's deployed to Heroku
if os.environ.get("IS_HEROKU"):
    # print("\nHEROKU")
    user = os.environ.get("NAGIOS_INTEGRATION_SNOW_USERNAME")
    passwd = os.environ.get("NAGIOS_INTEGRATION_SNOW_PASSWORD")

# Configures the app when it's ran locally and variables are pulled from .env
elif os.getenv("IS_DEV"):
    # print("\nLOCAL DEV")
    user = os.getenv("NAGIOS_ENV_USER")
    passwd = os.getenv("NAGIOS_ENV_PASSWD")

else:
    print("FALSE")

##########################################################################################
# VARIABLES REDACTED
# prod_sys_id_url
# prod_api_url
# business_service
# ccc_noc_id
# created_by_id
#########################################################################################


def agios_put_on_hold():

    # This grabs any and all new tickets generated by 24x7 and assigned to Cloud Services. verify=False ignores a cert error
    r = requests.get(prod_api_url, auth=(user, passwd), verify=False,
                     params={"active": "true",
                             "state": "1",
                             "sys_created_by": created_by_id,
                             "assigned_to": "",
                             "assignment_group": ccc_noc_id})

    r_json = r.json()  # Converts it to json
    on_hold_ticket_count = 0

    if r.status_code == 200:

        # NOTE: Try and get the business service and make assigning 'Infrastructure' condition-based?
        data = {'business_service': business_service,
                'contact_type': 'email',
                'u_outage': 'No',
                'incident_state': '3'
                }

        for x in range(len(r_json['result'])):
            requests.put(prod_api_url + '/' + r_json['result'][x]['sys_id'], auth=(user, passwd), verify=False,
                         data=str(data))
            on_hold_ticket_count += 1

        return f"{on_hold_ticket_count} ticket(s) have been placed on hold."

    elif r.status_code == 404:
        return f"Error code: {str(r.status_code)} - Most likely, there are no tickets that can be put on hold right now"

    else:
        return f"Error code: {str(r.status_code)} - Unknown issue.  Please try again or investigate the issue."
