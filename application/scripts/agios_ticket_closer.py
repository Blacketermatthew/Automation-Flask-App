import requests
import urllib3
from os import environ, getenv
import json  # Mainly used for view request output in an easily readable format using variable r_pretty
# this is for environmental variables to store API keys
from dotenv import load_dotenv
# This will suppress the certificate warnings
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

###############################################################################################################
# Main purpose of script: To close any/all New, open, and unassigned tickets generated by Agios.              #
# Notes:                                                                                                      #
#       Incident API states: 1. New | 2. In Progress | 3. On Hold | 6. Resolved | 7. Closed | 8. Canceled     #
#       Task API states: -1. Open | 0. Review | 2. Pending | 3. Closed Complete                               #                                                                                                                                                 #
###############################################################################################################

######### VARIABLES #########

# Traditional variables from .env
load_dotenv()

# Used to configure the app when it's deployed to Heroku
if environ.get("IS_HEROKU"):
    # print("\nHEROKU")
    user = environ.get("NAGIOS_INTEGRATION_SNOW_USERNAME")
    passwd = environ.get("NAGIOS_INTEGRATION_SNOW_PASSWORD")

# Configures the app when it's ran locally and variables are pulled from .env
elif getenv("IS_DEV"):
    # print("\nLOCAL DEV")
    user = getenv("NAGIOS_ENV_USER")  # May also go by 'ENV_USER' in .env file
    # May also go by 'ENV_PWD' in .env file
    passwd = getenv("NAGIOS_ENV_PASSWD")

else:
    print("FALSE")

##########################################################################################
# VARIABLES REDACTED
# user
# passwd
# sys_id_url
# inc_api_url
# business_service
# ccc_noc_id
# created_by_id
# nagios_automation_sys_id
# ccc_noc_id
#########################################################################################


def agios_closer(sys_id=""):
    # This grabs any and all new tickets generated by 24x7 and assigned to Cloud Services. verify=False ignores a cert error
    r = requests.get(inc_api_url, auth=(user, passwd), verify=False,
                     params={"active": "true",
                             "state": "1",
                             "sys_created_by": created_by_id,
                             "assignment_group": ccc_noc_id})

    r_json = r.json()  # Converts it to json

    closed_ticket_count = 0

    if r.status_code == 200:

        # NOTE: Try and get the business service and make assigning 'Infrastructure' condition-based?
        data = {'business_service': business_service,
                'contact_type': 'email',
                'assigned_to': nagios_automation_sys_id,
                'u_outage': 'No',
                'close_code': 'Solved Remotely (Work Around)',
                'close_notes': 'The alert has cleared.  This ticket was closed using via API.  Please reach out to the CRC if you have any questions or concerns.',
                'incident_state': '6'
                }

        for x in range(len(r_json['result'])):
            requests.put(inc_api_url + '/' + r_json['result'][x]['sys_id'], auth=(user, passwd), verify=False,
                         data=str(data))
            closed_ticket_count += 1

        agios_closer_dict = {
            'flash_category': 'success',
            'message': f"{closed_ticket_count} ticket(s) closed."}

    elif r.status_code == 404:
        agios_closer_dict = {
            'flash_category': 'danger',
            'message': f"Error code: {str(r.status_code)} - Most likely, there are no closeable Site24x7 tickets right now."}

    else:
        agios_closer_dict = {
            'flash_category': 'info',
            'message': f"Error code: {str(r.status_code)} - Unknown issue.  Please try again or investigate the issue."}

    return agios_closer_dict
