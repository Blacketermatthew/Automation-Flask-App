from selenium import webdriver
import requests
import time
import urllib3
import os
import json  # Mainly used for view request output in an easily readable format using variable r_pretty
# this is for environmental variables to store API keys
from dotenv import load_dotenv
# This will suppress the certificate warnings
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

###############################################################################################################
# Main purpose of the script: To close any/all open, unassigned Site24x7 tickets that can be closed/resolved. #
###############################################################################################################

load_dotenv()  # loads the .env file

##########################################################################################
# VARIABLES REDACTED
# team_dict
# user
# passwd
# prod_sys_id_url
# prod_api_url
# business_service
# ccc_noc_id
# created_by_id
# closed_ticket_count
#########################################################################################


# Incident states: 1. New  2. In Progress  3. On Hold  4.  5.  6. Resolved 7. Closed  8. Canceled
# This grabs any and all new tickets generated by 24x7 and assigned to Cloud Services. verify=False ignores a cert error
r = requests.get(prod_api_url, auth=(user, passwd), verify=False,
                 params={"active": "true",
                         "state": "3",
                         "sys_created_by": created_by_id,
                         "assigned_to": "",
                         "assignment_group": ccc_noc_id})

r_json = r.json()  # Converts it to json
# r_pretty = json.dumps(r_json, indent=2)  # Used for testing purposes
r_results = r_json['result']

tickets_on_hold = [r_results[x]['number'] for x in range(len(r_results))]
tickets_to_ignore = []
ignored_ticket = ""


if r.status_code == 200:
    # This part asks for your unique 0-9 number (as shown), then grabs your unique SNOW API ID and puts in in crc_user_id.
    # SNOW's API doesn't give out or accept our names; they assign us unique ID's.  The input is necessary to personalize and run the request below.
    # The print command prints each team member and their assigned number.  The second part puts the first tuple element (our names) and converts it to printable string.

    for number, person in team_dict.items():
        print(number + ' - ' + str(person[0]))

    crc_user_input = input("Type your number then press enter: ")
    crc_user_id = team_dict[crc_user_input][1]

    while ignored_ticket != "DONE":
        ignored_ticket = input("\nOne at a time, enter the ticket number for any INC ticket(s) you'd like the script to ignore. (Press ctrl + c to exit if you mess up)"
                               "\nType 'done' when finished adding. \n>").upper()
        if ignored_ticket == "DONE":
            break
        if ignored_ticket.startswith("INC") is True and len(ignored_ticket) == 10:
            tickets_to_ignore.append(ignored_ticket)
        print("\nTickets being ignored: ", tickets_to_ignore)

    print(f"Checking {len(r_results)} open ticket(s).")

    # NOTE: Try and get the business service and make assigning 'Infrastructure' condition-based?
    data = {'business_service': business_service,
            'contact_type': 'email',
            'assigned_to': crc_user_id,
            'u_outage': 'No',
            'close_code': 'Solved Remotely (Work Around)',
            'close_notes': 'This alert has cleared.  This ticket was closed using via API.  Please reach out to the CRC if you have any questions or concerns.',
            'incident_state': '6'
            }

    for x in range(len(r_results)):
        if r_results[x]['number'] in tickets_to_ignore:
            print(f"IGNORED: {r_results[x]['number']}")
            pass
        else:
            requests.put(prod_api_url + '/' + r_results[x]['sys_id'], auth=(user, passwd), verify=False,
                         data=str(data))
            closed_ticket_count += 1

    print(f"{closed_ticket_count} ticket(s) have been closed.")

elif r.status_code == 404:
    print("Error code: " + str(r.status_code) +
          "- Most likely, there are no closeable tickets right now")

else:
    print("Error code: " + str(r.status_code) +
          ".  Unknown issue.  Please try again or investigate the issue.")
